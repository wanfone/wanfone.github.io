<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>安卓手机安装GKD屏蔽广告</title>
    <link href="/2025/10/02/%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E5%AE%89%E8%A3%85GKD%E5%B1%8F%E8%94%BD%E5%B9%BF%E5%91%8A/"/>
    <url>/2025/10/02/%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E5%AE%89%E8%A3%85GKD%E5%B1%8F%E8%94%BD%E5%B9%BF%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="GKD的安装"><a href="#GKD的安装" class="headerlink" title="GKD的安装"></a>GKD的安装</h1><p>GKD下载链接：<a href="https://github.com/gkd-kit/gkd/" title="Github发布地址">Github Releases</a>，<a href="https://gkd.li/" title="GKD官方下载">GKD官网</a>，建议安装1.11.0版，如果是电脑下载通过微信电脑版传到手机上，微信会自定更改文件后缀名为：gkd-v1.11.0-beta.1.apk.1，需要在.&#x2F;Download&#x2F;WeiXin目录中更改成gkd-v1.11.0-beta.1.apk，然后手动安装。</p><h2 id="给GKD授予相应权限"><a href="#给GKD授予相应权限" class="headerlink" title="给GKD授予相应权限"></a>给GKD授予相应权限</h2><p>打开GKD软件，找到并点击“无障碍权限授权”选项，以允许GKD进行必要的操作。</p><p> <img src="/2025/10/02/%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E5%AE%89%E8%A3%85GKD%E5%B1%8F%E8%94%BD%E5%B9%BF%E5%91%8A/%E6%8E%88%E6%9D%83.jpg" alt="授权"></p><h2 id="规则导入"><a href="#规则导入" class="headerlink" title="规则导入"></a>规则导入</h2><p>点击订阅 -&gt; 添加订阅，输入一下订阅链接：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>registry.npmmirror.com<span class="hljs-regexp">/@aisouler/g</span>kd_subscription<span class="hljs-regexp">/latest/</span>files<span class="hljs-regexp">/dist/</span>AIsouler_gkd.json5<br></code></pre></td></tr></table></figure><h1 id="荣耀手机杀后台的处理"><a href="#荣耀手机杀后台的处理" class="headerlink" title="荣耀手机杀后台的处理"></a>荣耀手机杀后台的处理</h1><p>进入设置 -&gt; 应用 -&gt; 应用启动管理 -&gt; GKD，关闭应用的自动管理开关，并在弹框中打开允许自启动、允许关联启动、允许后台活动开关。</p><p>经过以上设计，就可以屏蔽大部分app的广告了，如果问题可以留言。</p>]]></content>
    
    
    <categories>
      
      <category>安卓</category>
      
    </categories>
    
    
    <tags>
      
      <tag>备忘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PID控制算法之学习笔记</title>
    <link href="/2025/09/26/PID%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95%E4%B9%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/09/26/PID%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95%E4%B9%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<table><tr><td bgcolor=#7FFFD4>小记：<br>1,&emsp;之前看过PID算法，云里雾里的，没彻底搞清楚。2025年5月6号，在淘宝上花费4.79元，买了二手书：『高等数学』同济大学 第七版上下册（第八版太贵了lol），最近2~3天才把上册囫囵吞枣的看了一半，刚看到定积分部分（网上的高数教程我实在是看不下去）。然后重新学习PID算法。<br>2,&emsp;之前也看过很多别人上传的视频或文章，总是云里雾里的，没彻底搞清楚，不知道是因为高等数学基础太差还是别人本身就没搞清楚，讲不明白。特做笔记如下：<br><strong>！！！注意注意注意：PID中的微分，实际上是求导！！！</strong></td></tr></table><h2 id="PID概述"><a href="#PID概述" class="headerlink" title="PID概述"></a>PID概述</h2><p>PID（Proportional Integral Derivative）是比例、积分、微分三个英文单词的缩写，即比例、积分、微分控制。PID控制就是测量元件得到系统的输出后，将输出经过比例、积分、微分3种运算方式，叠加到输入中，从而控制系统的行为。PID信号框图和PID算法公式如下图所示：</p><p><img src="/2025/09/26/PID%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95%E4%B9%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/clip_image002.png" alt="PID信号框图"></p><p><img src="/2025/09/26/PID%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95%E4%B9%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/clip_image004.png" alt="PID算法公式"></p><p>公式中的参数解释如下：</p><p><strong>kp</strong>：比例增益</p><p><strong>err(t)</strong>：当前时刻的偏差</p><p><strong>T<del>I</del></strong>：积分时间常数，<em>积分时间常数决定了积分作用的「强度」和「速度」。值越小，积分作用越强，消除稳态误差的速度越快，但系统也越容易振荡；值越大，积分作用越弱，消除稳态误差的速度越慢，但系统越稳定。</em></p><p><strong>T<del>D</del></strong>：微分时间常数</p><h2 id="比例控制算法"><a href="#比例控制算法" class="headerlink" title="比例控制算法"></a><strong>比例控制算法</strong></h2><p>假设有一个水缸，最终的控制目的是要保证水缸里的水位维持在1米的高度。假设初始时刻，水缸里的水位是0.2米，那么当前时刻的水位和目标水位之间是存在一个误差error的，且error为0.8。</p><p>假设通过往缸里加水的方式来控制水位，如果单纯的用比例控制算法，就是指加入的水量u和误差error是成正比的。即u&#x3D;kp*error，假设kp取0.5，那么t&#x3D;1时（表示第1次加水，也就是第一次对系统施加控制），那么u&#x3D;0.5*0.8&#x3D;0.4，所以这一次加入的水量会使水位在0.2的基础上上升0.4，达到0.6。</p><p>接着，t&#x3D;2时刻（第2次施加控制），当前水位是0.6，所以error是0.4。u&#x3D;0.5*0.4&#x3D;0.2，第2次加水会使水位上升0.2，达到0.8。如此循环下去，就是比例控制算法的运行方式。</p><p>但是，比例控制存在着一些不足，其中一点就是：稳态误差！像上述的例子，考虑另外一种情况，假设这个水缸在加水的过程中，存在漏水的情况，假设每次加水的过程，都会漏掉0.1米高度的水。仍然假设kp取0.5，那么会存在着某种情况，假设经过几次加水，水缸中的水位到0.8时，水位将不会再变化！！！因为，水位为0.8，则误差error&#x3D;0.2。所以每次往水缸中加水的量为u&#x3D;0.5*0.2&#x3D;0.1。同时，每次加水缸里又会流出0.1米的水。加入和流出相抵消，水位将不再变化。也就是说，我的目标是1米，但是最后系统达到0.8米的水位就不再变化了，且系统已经达到稳定。由此产生的误差就是稳态误差。</p><p>在实际情况中，汽车运动中的摩擦阻力，机械臂的运动、无人机的飞行中的各类阻力、外力和消耗都可以理解为本例中的“漏水”，所以，单独的比例控制，在很多时候并不能满足要求。</p><h2 id="积分控制算法"><a href="#积分控制算法" class="headerlink" title="积分控制算法"></a><strong>积分控制算法</strong></h2><p>如果仅仅用比例，可以发现存在静态误差，最后的水位就卡在0.8了。于是，在控制中，我们再引入一个分量，该分量和误差的积分是正比关系。所以，比例+积分控制算法为： u&#x3D;kp*error + ki * ∫error(t)dt，还是用上面的例子来说明，第一次的误差error是0.8，第二次的误差是0.4，至此，误差的积分（离散情况下积分其实就是做累加），∫error(t)dt&#x3D;0.8+0.4&#x3D;1.2。这个时候的控制量，除了比例部分，还有系数ki乘以这个积分项。由于这个积分项会将前面若干次的误差进行累计，所以可以很好的消除稳态误差（假设在仅有比例项的情况下，系统卡在稳态误差了，即上例中的0.8，由于加入了积分项的存在，会让输入增大，从而使得水缸的水位可以大于0.8，渐渐到达目标的1.0）这就是积分项的作用。</p><h2 id="微分控制算法"><a href="#微分控制算法" class="headerlink" title="微分控制算法"></a><strong>微分控制算法</strong></h2><p>考虑刹车情况，当发现前面有红灯时，为了使得行车平稳，会提前放松油门并踩刹车。当车辆离停车线非常近的时候，则使劲踩刹车，使车辆停下来。整个过程可以看做一个加入微分的控制策略。</p><p>微分，在离散情况下，就是error的差值，就是t时刻和t-1时刻error的差，即u&#x3D;kd*(error(t) - error(t-1))，其中的kd是一个系数项。在刹车过程中，因为error是越来越小的，所以这个微分控制项是负数，在控制中加入一个负数项，就起到了减小控制量的作用，也就是“刹车”。他存在的作用就是为了防止汽车由于刹车不及时而闯过了线。从常识上可以理解，越是靠近停车线，越是应该注意踩刹车，不能让车过线，所以这个微分项的作用，就可以理解为刹车，当车离停车线很近并且车速还很快时，这个微分项的绝对值（是个负数）就会很大，从而表示应该用力踩刹车才能让车停下来。</p><p>以上例子中车速可类比为微分项，车速越快刹车越快。切换到上面给水缸加水的例子，就是当发现水缸里的水快要接近1的时候，加入微分项，可以防止给水缸里的水加到超过1米的高度，说白了就是减少控制过程中的震荡。</p><h2 id="PID算法逐项解释"><a href="#PID算法逐项解释" class="headerlink" title="PID算法逐项解释"></a>PID算法逐项解释</h2><p><strong>1，</strong> 比例调节P起<strong>主要控制作用</strong>，<strong>纠正偏差</strong>，比例分力与当前偏差Δe(t)成正比，其反应迅速，响应速度快，但可能导致<strong>超调或振荡</strong>。比例负责“<strong>当下</strong>”，根据当前误差大小做出快速反应。</p><p><strong>2，</strong> 积分调节I的功能是<strong>消除稳态误差</strong>‌，积分产生的分力正比于偏差Δe(t)的积分∫e(t)dt，即偏差的累积积分，当误差持续存在时，这个分力会逐渐变大，试图消除系统在稳态时存在的静差，进而改善系统的静态性能。但可能降低系统动态响应性能，引起<strong>超调或振荡</strong>。积分负责“<strong>过去</strong>”，根据误差的历史积累进行纠正。</p><p><strong>3，</strong> 微分调节D基于偏差的变化率（导数de(t)&#x2F;dt）<strong>提前进行超前控制</strong>，当偏差变化较快时，微分作用会抑制偏差的进一步变化，从而有效减少系统的超调量，微分环节产生的分力始终阻碍偏差的变化，产生阻尼&#x2F;惯性和预测功能，其作用是抑制超调、振荡，并提高动态响应速度（阶跃输入目标值和扰动时，偏差快速增大，导数是个很大的正数，更敏捷）或降低响应速度（接近目标时，偏差快速减小，导数是个很大的负数，更平稳）。微分负责“<strong>未来</strong>”，根据误差的变化趋势（变化率）进行控制。</p><h2 id="PID注意事项："><a href="#PID注意事项：" class="headerlink" title="PID注意事项："></a><strong>PID注意事项：</strong></h2><p>1， 比例增益kp，积分时间常数T<del>I</del>，微分时间常数T<del>D</del>都是正数，但比例&#x2F;微分&#x2F;积分都是有正负的。</p><p>2， 偏差是一个状态值，偏差变化率是偏差随时间变化的速度，是一个<strong>趋势值</strong>，表示『正在以多快的速度远离或接近目标』。偏差在减小，de(t)&#x2F;dt就是负数，反之亦然。微分作用抑制的不是「向目标运动」这个事实，微分作用总是试图抑制偏差当前的变化趋势。如果偏差正在减小（de&#x2F;dt&lt;0），微分作用为负，抑制减小速度，防止超调（比例调节主导，防止超调）。如果偏差正在增大（de&#x2F;dt&gt;0），微分作用为正，抑制增大速度，强力纠偏（外界干扰导致偏差，此时比例调节作用很小，微分主导）。</p><h2 id="为什么明明是求导，反而叫微分呢！！！"><a href="#为什么明明是求导，反而叫微分呢！！！" class="headerlink" title="为什么明明是求导，反而叫微分呢！！！"></a>为什么明明是求导，反而叫微分呢！！！</h2><p>d&#x2F;dt表示“对时间求导数”。derr(t)&#x2F;dt是偏差err(t)对时间t的导数。它表示的是『偏差变化的快慢和方向』，也就是偏差的变化率。<u>按照纯数学视角应该叫导数项</u>，而不是微分项。但在控制理论的语境下，“微分”一词指的是“<strong>微分运算”这个整体动作和其产生的结果</strong>，而不仅仅是数学概念中的『微分dy -&gt; 变化量，导数dy&#x2F;dx -&gt; 变化率』。<strong>叫“微分项”是工程上的习惯</strong>，但它的核心是“求导”。这是工程习惯与历史沿革造成的：PID控制理论诞生于工程实践，早于现代严格的数学符号规范化，“微分项”是控制工程领域的惯例和习惯用法。</p>]]></content>
    
    
    <categories>
      
      <category>工控</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工控</tag>
      
      <tag>PLC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>9月月度文章</title>
    <link href="/2025/09/20/9%E6%9C%88%E6%9C%88%E5%BA%A6%E6%96%87%E7%AB%A0/"/>
    <url>/2025/09/20/9%E6%9C%88%E6%9C%88%E5%BA%A6%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>最近在学习Winform，github说是30天不更新，会自动删除代码，先上传占坑。</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>备忘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决国内waline无法使用的问题</title>
    <link href="/2025/08/28/%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85waline%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2025/08/28/%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85waline%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<blockquote><table><tr><td bgcolor=#7FFFD4>waline的评论模块国内IP可以正常显示，但是无法登录，无法加载表情和历史评论，导致无法使用。究其原因是vercel.app域名在国内遭到污染无法访问导致的。解决方案：用已有域名的子域名来代替vercel.app。</td></tr></table></blockquote><p>步骤如下：</p><p>① 打开域名管理后台，添加一个<em>二级域名</em>，以下以新网为例。添加一个<code>comment</code>二级域名，并且CNAME解析记录指向了<code>cname.vercel-dns.com</code>，如下图：</p><style>.eoitjbguthox{}</style><img src="/2025/08/28/%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85waline%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/image-20250828182559071.png" class="eoitjbguthox"><p>② 打开<code>vercel.com</code>，点击顶部的Domains并选择对应的平台，然后让原有的<code>vercel</code>上的<code>waline</code>地址指向你设置的子域名上。</p><style>.gqeuwwkcxgym{}</style><img src="/2025/08/28/%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85waline%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/image-20250828183148715.png" class="gqeuwwkcxgym"><style>.hhbmgawdrdtq{}</style><img src="/2025/08/28/%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85waline%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/image-20250828184814653.png" class="hhbmgawdrdtq"><p>③ 进入<code>themes -&gt; fluid</code> 文件夹下的配置文件<code>_config.yml</code>中，在<code>serverURL</code>处更改成最新的二级域名即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">waline:</span><br>  <span class="hljs-attr">serverURL:</span> <span class="hljs-string">comment.domains.cn</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br>  <span class="hljs-attr">meta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>, <span class="hljs-string">&#x27;mail&#x27;</span>, <span class="hljs-string">&#x27;link&#x27;</span>]<br>  <span class="hljs-attr">requiredMeta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>]<br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">&#x27;zh-CN&#x27;</span><br>  <span class="hljs-attr">emoji:</span> [<span class="hljs-string">&#x27;https://cdn.jsdelivr.net/gh/walinejs/emojis/weibo&#x27;</span>]<br>  <span class="hljs-attr">dark:</span> <span class="hljs-string">&#x27;html[data-user-color-scheme=&quot;dark&quot;]&#x27;</span><br>  <span class="hljs-attr">wordLimit:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>Fluid</tag>
      
      <tag>waline</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo图片显示问题</title>
    <link href="/2025/08/28/hexo%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
    <url>/2025/08/28/hexo%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>hexo图片无法显示的问题可以通过以下方法解决：</p><ol><li><p>安装图片插件<code>hexo-renderer-marked</code>，在Git Bash中运行如下命令：<code>npm install hexo-renderer-marked</code>安装。</p></li><li><p>然后在配置文件<code>config.yaml</code>中做如下更改：</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">post_asset_folder</span>: <span class="hljs-literal">true</span><br><span class="hljs-attr">marked</span>:<br>  <span class="hljs-attr">prependRoot</span>: <span class="hljs-literal">true</span><br>  <span class="hljs-attr">postAsset</span>: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>这样每次在使用<code>hexo new</code>命令创建新文章时，会生成相同名字的文件夹，也就是文章资源文件夹</p><ol start="3"><li>修改Typora的设置，在文件 -&gt; 偏好设置 -&gt; 图像中做如下设置：①修改插入图片时 -&gt; 为复制到指定路径。②选中优先使用相对路径。</li></ol><p><img src="/2025/08/28/hexo%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/image-20250828161143052.png" alt="Typora的设置"></p><p>经过以上设置后，在复制图片粘贴到Typora中后，会直接复制该图片到文章资源文件夹，同时自动更改路径，图片会自动变为! [ ] ( 文章名&#x2F;image.jpg)，经测试可以正常显示。</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>Typora</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>增加网站底部运行时间显示</title>
    <link href="/2025/08/28/%E5%A2%9E%E5%8A%A0%E7%BD%91%E7%AB%99%E5%BA%95%E9%83%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E6%98%BE%E7%A4%BA/"/>
    <url>/2025/08/28/%E5%A2%9E%E5%8A%A0%E7%BD%91%E7%AB%99%E5%BA%95%E9%83%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E6%98%BE%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<p>在主题 <code>themes -&gt; fluid -&gt; source -&gt; js</code> 文件夹中添加文件 <code>duration.js</code>，输入以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript">!(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">/** 计时起始时间，自行修改 **/</span><br>  <span class="hljs-keyword">var</span> start = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;2025/08/25 01:18:37&quot;</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    now.<span class="hljs-title function_">setTime</span>(now.<span class="hljs-title function_">getTime</span>()+<span class="hljs-number">250</span>);<br>    days = (now - start) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> / <span class="hljs-number">24</span>;<br>    dnum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(days);<br>    hours = (now - start) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * dnum);<br>    hnum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(hours);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">String</span>(hnum).<span class="hljs-property">length</span> === <span class="hljs-number">1</span> )&#123;<br>      hnum = <span class="hljs-string">&quot;0&quot;</span> + hnum;<br>    &#125;<br>    minutes = (now - start) / <span class="hljs-number">1000</span> /<span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * hnum);<br>    mnum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(minutes);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">String</span>(mnum).<span class="hljs-property">length</span> === <span class="hljs-number">1</span> )&#123;<br>      mnum = <span class="hljs-string">&quot;0&quot;</span> + mnum;<br>    &#125;<br>    seconds = (now - start) / <span class="hljs-number">1000</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * hnum) - (<span class="hljs-number">60</span> * mnum);<br>    snum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(seconds);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">String</span>(snum).<span class="hljs-property">length</span> === <span class="hljs-number">1</span> )&#123;<br>      snum = <span class="hljs-string">&quot;0&quot;</span> + snum;<br>    &#125;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;timeDate&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;本站安全运行&amp;nbsp&quot;</span>+dnum+<span class="hljs-string">&quot;&amp;nbsp天&quot;</span>;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;times&quot;</span>).<span class="hljs-property">innerHTML</span> = hnum + <span class="hljs-string">&quot;&amp;nbsp小时&amp;nbsp&quot;</span> + mnum + <span class="hljs-string">&quot;&amp;nbsp分&amp;nbsp&quot;</span> + snum + <span class="hljs-string">&quot;&amp;nbsp秒&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-title function_">update</span>();<br>  <span class="hljs-built_in">setInterval</span>(update, <span class="hljs-number">1000</span>);<br>&#125;)();<br></code></pre></td></tr></table></figure><p>在<code>themes -&gt; fluid</code>文件夹中修改主题配置文件<code>_config.yml</code>，搜索<code>footer: content</code> 增加以下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">footer</span>:<br>  <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;</span><br><span class="hljs-string">    &lt;div style=&quot;font-size: 0.85rem&quot;&gt;</span><br><span class="hljs-string">      &lt;span id=&quot;timeDate&quot;&gt;载入天数...&lt;/span&gt;</span><br><span class="hljs-string">      &lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/span&gt;</span><br><span class="hljs-string">      /** duration.js地址，视情况自行更改 **/</span><br><span class="hljs-string">      &lt;script src=&quot;/js/duration.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">  &#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>winform中读取西门子1200PLC中Real数据的问题</title>
    <link href="/2025/08/26/winform%E4%B8%AD%E8%AF%BB%E5%8F%96%E8%A5%BF%E9%97%A8%E5%AD%901200PLC%E4%B8%ADReal%E6%95%B0%E6%8D%AE%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2025/08/26/winform%E4%B8%AD%E8%AF%BB%E5%8F%96%E8%A5%BF%E9%97%A8%E5%AD%901200PLC%E4%B8%ADReal%E6%95%B0%E6%8D%AE%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>PLC中的Real类型数据，占用32个bit，采用IEEE754标准格式存储，类似于2进制的科学计数法，如下图所示，而Byte类型数据是以8位二进制补码形式存储。</p><p><img src="/2025/08/26/winform%E4%B8%AD%E8%AF%BB%E5%8F%96%E8%A5%BF%E9%97%A8%E5%AD%901200PLC%E4%B8%ADReal%E6%95%B0%E6%8D%AE%E7%9A%84%E9%97%AE%E9%A2%98/image-20250829160853242.png" alt="IEEE754标准"></p><p>经测试S7netplus通讯库中的Read()函数读取PLC中的Real数据时，<strong>括号内的参数</strong>采用简写形式时，即写成类似这种形式：object? values &#x3D; plc.Read(“DB1.DBD4”);，其返回值是IEEE754格式的二进制数据，比如S7-1200中的DB1.DBD4中存储的是4.5，但是读取出来是1083179008。</p><p><img src="/2025/08/26/winform%E4%B8%AD%E8%AF%BB%E5%8F%96%E8%A5%BF%E9%97%A8%E5%AD%901200PLC%E4%B8%ADReal%E6%95%B0%E6%8D%AE%E7%9A%84%E9%97%AE%E9%A2%98/2025-08-26_124131.png" alt="Read返回值"></p><p><img src="/2025/08/26/winform%E4%B8%AD%E8%AF%BB%E5%8F%96%E8%A5%BF%E9%97%A8%E5%AD%901200PLC%E4%B8%ADReal%E6%95%B0%E6%8D%AE%E7%9A%84%E9%97%AE%E9%A2%98/2025-08-26_150202.png" alt="IEEE754格式转换"></p><p>当不采用简写形式，即：Read(S7.Net.DataType.DataBlock, 1, 4, S7.Net.VarType.Real, 1);时，返回的是正常的float数据4.5。使用简写Read(“DB1.DBB2”);可正常读取PLC中的Byte类型数据。</p><p>​C#与PLC中的数据类型不一样，在PLC中Byte— 8位，Word&#x2F;Int—16位，DWord—32位，但在C#中byte—8位，ushort—16位，int—32位。所以C#与PLC中的数据互相交换时，尤其在写操作时，需要经过以下转换:</p><p>PLC数据 -&gt; C#数据<br>Byte -&gt; byte<br>Word -&gt; short&#x2F;ushort — 或者使用int16&#x2F;uint16<br>Dword -&gt; int&#x2F;uint — 或者使用int32&#x2F;uint32<br>bit -&gt; bool</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//ComboBox中的字符串转换成枚举类型，注意必须是枚举里面的名称才能转换</span><br>S7.Net.CpuType cpuType = (S7.Net.CpuType)Enum.Parse(<span class="hljs-keyword">typeof</span>(S7.Net.CpuType), comboBox1.Text);<br><span class="hljs-built_in">string</span> ip = textBox1.Text;      <span class="hljs-comment">//IP本来就是字符串</span><br><span class="hljs-built_in">short</span> rack = <span class="hljs-built_in">short</span>.Parse(textBox2.Text);    <span class="hljs-comment">//把字符串转换成short，简单处理仅限输入数字。</span><br><span class="hljs-built_in">short</span> slot = <span class="hljs-built_in">short</span>.Parse(textBox3.Text);<br>S7.Net.Plc plc = <span class="hljs-keyword">new</span> S7.Net.Plc(cpuType,ip,rack,slot);<br>plc.Open();<br><br><span class="hljs-comment">//PLC中Real变量32位,储存格式IEEE745---C#中的int变量32位，存储格式二进制补码</span><br><span class="hljs-built_in">float</span> t = (<span class="hljs-built_in">float</span>)plc.Read(S7.Net.DataType.DataBlock, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, S7.Net.VarType.Real, <span class="hljs-number">1</span>);<br>label6.Text = t.ToString();    <br></code></pre></td></tr></table></figure><p><img src="/2025/08/26/winform%E4%B8%AD%E8%AF%BB%E5%8F%96%E8%A5%BF%E9%97%A8%E5%AD%901200PLC%E4%B8%ADReal%E6%95%B0%E6%8D%AE%E7%9A%84%E9%97%AE%E9%A2%98/image-20250829164022085.png" alt="连接到PLC"></p>]]></content>
    
    
    <categories>
      
      <category>PLC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PLC</tag>
      
      <tag>Winform</tag>
      
      <tag>S7netplus</tag>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>近2天GitHub个人博客的阶段总结</title>
    <link href="/2025/08/25/%E8%BF%912%E5%A4%A9Github%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/"/>
    <url>/2025/08/25/%E8%BF%912%E5%A4%A9Github%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="上线个人博客的缘由"><a href="#上线个人博客的缘由" class="headerlink" title="上线个人博客的缘由"></a>上线个人博客的缘由</h1><blockquote><p><strong>缘由</strong>：2025年8月24日，19:00左右，边吃饭边看新闻联播，大脑中忽然飘来个念头：做一个个人网站，因为上学时用过WordPress，说干就干！</p></blockquote><h2 id="试错过程"><a href="#试错过程" class="headerlink" title="试错过程"></a>试错过程</h2><ol><li>百度关键词<strong>虚拟主机</strong>，在天翼云免费申请了一个虚拟私有云的试用，天翼云产品有点乱，有点不明所以，大概是CDN加速用的，放弃。</li><li>在西部数码花费5元，购买了一个试用版虚拟主机，下载最新版WordPress，并使用FlashFxp上传，试用主机不能绑定域名，安装完毕后找了很久没有找到喜欢的主题，之前的备份主题很多都已经停止更新。</li><li>阴差阳错的找到Gridea，设置GitHub检测远程连接正常，但是死活不能同步。</li></ol><h2 id="结识hexo"><a href="#结识hexo" class="headerlink" title="结识hexo"></a>结识hexo</h2><p>使用DeepSeek搜索：类似Gridea的静态博客客户端，第一个推荐的就是hexo，百度hexo安装过程，还需要安装Node.js，对此一窍不通，但是电脑里已经安装了Git，可以试一试。由于GitHub国内访问速度不稳定，优先部署到Gitee上。</p><h2 id="坑货Gitee"><a href="#坑货Gitee" class="headerlink" title="坑货Gitee"></a>坑货Gitee</h2><p>按照步骤在Gitee上安装一切顺利，结果倒在最后一步上，Gitee停止了<del>Gitee Pages</del>的服务，功亏一篑。转战GitHub。</p><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p>GitHub安装hexo任然非常顺利，唯一的问题是waline评论模块一直不显示，8月24日搞到凌晨2~3点，仍然没有结果</p><p>8月25日，下午继续（昨晚睡得晚），先把全局字体改为霞鹜文楷体，14:00左右开始继续弄评论模块，忽然就可以使用了。大概是之前设置的serverURL地址错误导致的</p><p>至8月25日15:00，个人博客基本完工，上面流水账以兹纪念最近2天——1晚+1下午的工作。完毕，今天还没吃任何东西，15:40出门，准备奖励自己一顿大餐。</p><h2 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h2><ol><li><strong>waline评论模块国内不能登录，评论列表无法显示，VPN正常。是否需要CDN加速？</strong></li><li><strong>本地图片无法显示，安装hexo-asset-image和hexo-asset-imag也不能正常显示，只能使用网络在线图片，待有时间再解决。</strong></li></ol><p><strong>PS：</strong></p><ol><li><p>本人不懂PHP，asp，js，css等等的网页前端，准备学Django，买过一本书，看了不到10页。</p></li><li><p>经过2天的熟悉，现在觉得通过Typora在本地写纯文本，然后通过git bash的hexo d命令推送到GitHub上，比任何CMS用起来都要舒服。就像在自己电脑上编辑word文档，完事之后一键推送出去即可发表，不像CMS那样每次都要在线登录网站后台，在线编辑。</p></li><li><p>关键GitHub是完全免费的，买虚拟主机的钱都省了，对个人友好，唯一的问题是GitHub访问速度不是很稳定，但是个人博客对访问速度要求不是很高。</p></li></ol><p><img src="/2025/08/25/%E8%BF%912%E5%A4%A9Github%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/2025-08-25_200330.png" alt="Git Bash图片"></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>waline</tag>
      
      <tag>GitHub</tag>
      
      <tag>Gitee</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字体全局更改为霞鹜文楷体</title>
    <link href="/2025/08/25/%E5%AD%97%E4%BD%93%E5%85%A8%E5%B1%80%E6%9B%B4%E6%94%B9%E4%B8%BA%E9%9C%9E%E9%B9%9C%E6%96%87%E6%A5%B7%E4%BD%93/"/>
    <url>/2025/08/25/%E5%AD%97%E4%BD%93%E5%85%A8%E5%B1%80%E6%9B%B4%E6%94%B9%E4%B8%BA%E9%9C%9E%E9%B9%9C%E6%96%87%E6%A5%B7%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文引自：[ 效率工具指南 ]:  <a href="https://ww.penghh.fun/2023/05/07/2023-5-7-hexo_blog_font/">https://ww.penghh.fun/2023/05/07/2023-5-7-hexo_blog_font/</a>, 仅用于备忘。</p></blockquote><p>打开 Hexo 博客的主题文件夹下的 <code>head.ejs</code> 文件，具体路径为 <code>themes/fluid/layout/_partial/head.ejs</code>。</p><p>在文件的 head 标签中添加下面一行代码，通过 CDN 引入霞鹜文楷字体：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">&lt;link</span> <span class="hljs-string">rel=&quot;stylesheet&quot;</span> <span class="hljs-string">href=&quot;https://npm.elemecdn.com/lxgw-wenkai-screen-webfont/style.css&quot;</span> <span class="hljs-string">media=&quot;print&quot;</span> <span class="hljs-string">onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span><br></code></pre></td></tr></table></figure><p><a href="https://img.penghh.fun/2023/05/07/16834379640171.jpg"><img src="https://img.penghh.fun/2023/05/07/16834379640171.jpg" alt="img"></a></p><p>接着去到 fluid 主题下的 css 文件夹下，路径为 <code>themes/fluid/source/css</code>，新建一个自定义 CSS 文件 <code>custom.css</code>，在 CSS 文件中添加样式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">html,</span> <span class="hljs-string">body,</span> <span class="hljs-string">.markdown-body,</span> <span class="hljs-string">p</span> &#123;<br>  <span class="hljs-attr">font-family:</span> <span class="hljs-string">&#x27;LXGW WenKai Screen&#x27;</span><span class="hljs-string">;</span><br>&#125;<span class="hljs-string">Copy</span><br></code></pre></td></tr></table></figure><p><a href="https://img.penghh.fun/2023/05/07/16834382087815.jpg"><img src="https://img.penghh.fun/2023/05/07/16834382087815.jpg" alt="img"></a></p><p>再来到 fluid 主题的配置文件 <code>_config.yml</code>，路径为 <code>themes/fluid/_config.yml</code>，搜索配置项 <code>font_family</code>，在后面填上我们想用的霞鹜文楷字体对应的英文名 <code>&quot;LXGW Wenkai Screen&quot;</code>，记得要给字体名称加上引号哦。</p><p><a href="https://img.penghh.fun/2023/05/07/16834384189389.jpg"><img src="https://img.penghh.fun/2023/05/07/16834384189389.jpg" alt="img"></a></p><p>通过上面介绍的 3 个步骤，就能把 Hexo 博客的字体全局更改为霞鹜文楷体，是不是很简单呢？</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇文章</title>
    <link href="/2025/08/25/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <url>/2025/08/25/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>还没想好，仅用于测试。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/08/25/hello-world/"/>
    <url>/2025/08/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
